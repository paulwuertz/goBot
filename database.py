# Code auto-generated by Visual Alchemist version 1.0.6
import sqlalchemy, datetime
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, DateTime, String, Text, Float, ForeignKey
from sqlalchemy.dialects.mysql import BIGINT
from sqlalchemy.dialects.mysql import LONGTEXT
from sqlalchemy.orm import sessionmaker, relationship, backref

engine = create_engine(r'sqlite:///go.db', echo=True)
Session = sessionmaker()
Session.configure(bind=engine)
session = Session()
Base = declarative_base()

class Chat(Base):
    __tablename__ = "chat"
    id = Column(Integer, primary_key=True, unique=True, nullable=False)
    currentGame = Column(Integer)
    currentChallenge = Column(Integer)

class Challenge(Base):
    __tablename__ = "challenge"
    id = Column(Integer, primary_key=True, unique=True, nullable=False)
    playerBlack = Column(Integer, nullable=False)
    playerWhite = Column(Integer, nullable=False)

class Game(Base):
    __tablename__ = "game"
    id = Column(Integer, primary_key=True, unique=True, nullable=False)
    inChat = Column(Integer, ForeignKey('turn.id'), nullable=False)
    currentTurn = Column(Integer, ForeignKey('turn.id'))
    started = Column(DateTime)

class Turn(Base):
    __tablename__ = "turn"
    id = Column(Integer, primary_key=True, unique=True, nullable=False)
    gameID = Column(Integer, ForeignKey('game.id'), nullable=False)
    lastTurn = Column(Integer, ForeignKey('turn.id'))
    turnNumber = Column(Integer)
    boardString = Column(Text(361))

    def getLastTurn(self):
        if self.lastTurn:
            session.query(Turn).filter(Turn.id==self.lastTurn).one()
        else: return False

def createDB():
    Base.metadata.create_all(engine);

def dbAddChat(chatID):
    try:
        session.add(Chat(id=chatID))
        session.commit()
        return True
    except Exception as e:
        print(e)
        return False

def dbNewGame(chatID):
    try:
        game = Game(inChat=chatID, started=datetime.datetime.now())
        session.add(game)
        session.commit()
        turn = Turn(boardString="0"*361, gameID=game.id, turnNumber=0)
        session.add(turn)
        session.commit()
        chat = session.query(Chat).filter(Chat.id==game.inChat).one()
        chat.currentGame = game.id
        game.currentTurn = turn.id
        session.commit()
        return turn
    except Exception as e:
        print(e)
        return False

def getGameAndTurnFromChat(chatID):
    chat = session.query(Chat).filter(Chat.id==chatID).one()
    game = session.query(Game).filter(Game.id==chat.currentGame).one()
    turn = session.query(Turn).filter(Turn.id==game.currentTurn).one()
    return game, turn

def dbGetLastTurnGameString(chatID):
    game, turn = getGameAndTurnFromChat(chatID)
    lastTurn = turn.getLastTurn()
    if lastTurn: return lastTurn
    else: return False

def dbAddTurn(chatID, xy):
    try:
        game, turn = getGameAndTurnFromChat(chatID)
        bStr = turn.boardString
        x, y = xy
        bStr = bStr[:x+y*19] + str((turn.turnNumber+1)%2+1) + bStr[x+y*19+1:]
        nextTurn = Turn(boardString=bStr, gameID=game.id, turnNumber=(turn.turnNumber+1), lastTurn=turn.id)
        session.add(nextTurn)
        session.commit()
        game.currentTurn = nextTurn.id
        session.commit()
        return nextTurn
    except Exception as e:
        print(e)
        return False
